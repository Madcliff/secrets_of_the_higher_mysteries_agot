zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters_effect = { 
	send_interface_message = {
		type = event_generic_neutral
		title = zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters.t
		desc = zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient					
		custom_tooltip = zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters.tt
	}
	zz_valyria_magic_duel_stress_effect = yes 
	scope:recipient = {
		hidden_effect = {
			force_character_skill_recalculation = yes
			add_character_modifier = duel_edge_debuff_30_modifier
		}
	}
	zz_configure_start_magic_combat_effect = {
		SC_INITIATOR = scope:secondary_recipient
		SC_ATTACKER = scope:secondary_recipient
		SC_DEFENDER = scope:recipient
		FATALITY = possible
		FIXED = no
		LOCALE = tavern
		OUTPUT_EVENT = jason_locale_events.201 
		INVALIDATION_EVENT = single_combat.1006
		MAGIC = water
	}
}
zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent_effect = { 
	send_interface_message = {
		type = event_generic_neutral
		title = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent.t
		desc = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient					
		custom_tooltip = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent.tt
	}
	scope:target = {
		deplete_army_by_percentage = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent_value
	}
}

zz_valyria_magic_water_magic_03_mysteries_of_endurance_effect = {
	
	send_interface_message = {
		type = event_generic_neutral
		title = zz_valyria_magic_water_magic_03_mysteries_of_endurance.t
		desc = zz_valyria_magic_water_magic_03_mysteries_of_endurance.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient					
		custom_tooltip = zz_valyria_magic_water_magic_03_mysteries_of_endurance.tt
	}
	scope:target = {
		add_supply = zz_valyria_magic_water_magic_03_mysteries_of_endurance_value 
	}
}

zz_valyria_magic_water_magic_04_mysteries_of_rhoyne_effect = {
	
	send_interface_message = {
		type = event_generic_neutral
		title = zz_valyria_magic_water_magic_04_mysteries_of_rhoyne.t
		desc = zz_valyria_magic_water_magic_04_mysteries_of_rhoyne.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient					
		custom_tooltip = zz_valyria_magic_water_magic_04_mysteries_of_rhoyne.tt
	}
	if = {
		limit = {
			scope:option_01 ?= yes
		}
		scope:target = {
			create_epidemic_outbreak = {
				type = scope:epidemic
				intensity = minor
				save_scope_as = mysteries_of_rhoyne  # optional
			}
		}
	}
	if = {
		limit = {
			scope:option_02 ?= yes
		}
		scope:secondary_recipient = {
			set_variable = {
				name = zz_manacost 
				value = 25
			}

			zz_valyria_mana_spend = yes
		}
		scope:target = {
			create_epidemic_outbreak = {
				type = scope:epidemic
				intensity = major
				save_scope_as = mysteries_of_rhoyne  # optional
			}
		}
	}
	if = {
		limit = {
			scope:option_03 ?= yes
		}
		scope:secondary_recipient = {
			set_variable = {
				name = zz_manacost 
				value = 75
			}
			zz_valyria_mana_spend = yes
		}
		scope:target = {
			create_epidemic_outbreak = {
				type = scope:epidemic
				intensity = apocalyptic
				save_scope_as = mysteries_of_rhoyne  # optional
			}
		}
	}
}

zz_valyria_magic_water_magic_05_mysteries_of_winter_effect = {
	send_interface_message = {
		type = event_generic_neutral
		title = zz_valyria_magic_water_magic_05_mysteries_of_winter.t
		desc = zz_valyria_magic_water_magic_05_mysteries_of_winter.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient
		custom_tooltip = zz_valyria_magic_water_magic_05_mysteries_of_winter.tt
	}
	if = {
		limit = {
			NOT = {
				scope:actor = scope:recipient
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_loss
			sadistic = minor_stress_gain
			callous = minor_stress_gain
		}
	}

	scope:recipient = {
		zz_valyria_magic_apply_character_modifier_effect = { 
			MODIFIER = zz_valyria_magic_water_magic_05_mysteries_of_winter_modifier
			DURATION = 1
			BOOSTED_DURATION = 2
		}
			

		if = {
			limit = {
				NOT = { scope:actor = scope:recipient }
			}
			add_opinion = {
				modifier  = grateful_opinion
				target = scope:actor
				opinion = 70
			}
		}
	}
}

zz_valyria_magic_water_magic_06_mysteries_of_purity_effect = {
	send_interface_message = {
		type = event_generic_neutral
		title = zz_valyria_magic_water_magic_06_mysteries_of_purity.t
		desc = zz_valyria_magic_water_magic_06_mysteries_of_purity.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:target
		custom_tooltip = zz_valyria_magic_water_magic_06_mysteries_of_purity.tt
	}
	scope:target = {
		zz_valyria_magic_apply_province_modifier_effect = { 
			MODIFIER = zz_valyria_magic_water_magic_06_mysteries_of_purity_modifier
			DURATION = -1
			BOOSTED_DURATION = -1
		}
		if = { 
			limit = { 
				has_variable = epidemic_cooldown_general
			}
			change_variable = {
				name = epidemic_cooldown_general
				years = zz_valyria_magic_water_magic_06_mysteries_of_purity_value
			}
		}
		else = {
			set_variable = {
				name = epidemic_cooldown_general
				years = zz_valyria_magic_water_magic_06_mysteries_of_purity_value
			}
		}
	}
}

zz_valyria_magic_water_magic_07_mysteries_of_fertile_growth_effect = {
	send_interface_message = {
		type = event_generic_neutral
		title = zz_valyria_magic_water_magic_07_mysteries_of_fertile_growth.t
		desc = zz_valyria_magic_water_magic_07_mysteries_of_fertile_growth.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient					
		custom_tooltip = zz_valyria_magic_water_magic_07_mysteries_of_fertile_growth.tt
	}
	scope:target = {
		county = {
			change_development_level = zz_valyria_magic_water_magic_07_mysteries_of_fertile_growth_value
		}
	}
}

zz_valyria_magic_water_magic_08_mysteries_of_the_mists_effect = {
	send_interface_message = {
		type = event_generic_neutral
		title = zz_valyria_magic_water_magic_08_mysteries_of_the_mists.t
		desc = zz_valyria_magic_water_magic_08_mysteries_of_the_mists.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient
		custom_tooltip = zz_valyria_magic_water_magic_08_mysteries_of_the_mists.tt
	}
	scope:recipient = {
		zz_valyria_magic_apply_character_modifier_effect = { 
			MODIFIER = zz_valyria_magic_water_magic_08_mysteries_of_the_mists_modifier
			DURATION = 1
			BOOSTED_DURATION = 2
		}
	}
}

zz_valyria_magic_water_magic_09_mysteries_of_sodden_ground_effect = {
	send_interface_message = {
		type = event_generic_neutral
		title = zz_valyria_magic_water_magic_09_mysteries_of_sodden_ground.t
		desc = zz_valyria_magic_water_magic_09_mysteries_of_sodden_ground.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient
		custom_tooltip = zz_valyria_magic_water_magic_09_mysteries_of_sodden_ground.tt
	}
	scope:recipient = {
		zz_valyria_magic_apply_character_modifier_effect = { 
			MODIFIER = zz_valyria_magic_water_magic_09_mysteries_of_sodden_ground_modifier
			DURATION = 1
			BOOSTED_DURATION = 2
		}
	}
}

zz_valyria_magic_water_magic_10_mysteries_of_waters_resilience_effect = {
	send_interface_message = {
		type = event_generic_neutral
		title =  zz_valyria_magic_water_magic_10_mysteries_of_waters_resilience.t
		desc =  zz_valyria_magic_water_magic_10_mysteries_of_waters_resilience.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient
		custom_tooltip =  zz_valyria_magic_water_magic_10_mysteries_of_waters_resilience.tt
	}
	scope:recipient = {
		zz_valyria_magic_apply_character_modifier_effect = { 
			MODIFIER = zz_valyria_magic_water_magic_10_mysteries_of_waters_resilience_modifier
			DURATION = 1
			BOOSTED_DURATION = 2
		}
	}
}

zz_valyria_magic_water_magic_11_mysteries_of_waters_purity_effect = { 
	send_interface_message = {
		type = event_generic_neutral
		title = zz_valyria_magic_water_magic_11_mysteries_of_waters_purity.t
		desc = zz_valyria_magic_water_magic_11_mysteries_of_waters_purity.desc
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient
		custom_tooltip = zz_valyria_magic_water_magic_11_mysteries_of_waters_purity.tt
	}
	if = {
		limit = {
			NOT = {
				scope:actor = scope:recipient
			}
		}
		scope:actor = {
			stress_impact = {
				compassionate = medium_stress_impact_loss
				sadistic = minor_stress_gain
				callous = minor_stress_gain
			}
		}
	}
	while = {
		count = zz_valyria_magic_water_magic_11_mysteries_of_waters_purity_value 
		scope:recipient = { 
			stress_impact = {
				base = minor_stress_impact_loss
			}
			add_character_flag = {
				flag = immune_to_disease
				years = zz_valyria_magic_water_magic_11_mysteries_of_waters_purity_value
			}
			if = { 
				limit = { 
					OR = { 
						has_character_modifier = chronic_headaches_modifier 
						has_character_modifier = infected_wound_modifier
						has_character_modifier = gangrene_modifier
					}
				}
				if = { limit = { has_character_modifier = chronic_headaches_modifier }
					remove_character_modifier = chronic_headaches_modifier
				}
				if = { limit = { has_character_modifier = infected_wound_modifier }
					remove_character_modifier = infected_wound_modifier
				}
				if = { limit = { has_character_modifier = gangrene_modifier }
					remove_character_modifier = gangrene_modifier
				}
			}
			else = { 
				switch = { 
					trigger = has_trait 
					
					ill = { 
						recover_from_disease_effect = { DISEASE = ill } #Removes the trait, sends event "health.2202" to those who care
						remove_disease_treatment_effect = yes
					}
					sickly = {
						remove_trait = sickly
					}
					pneumonic = {
						recover_from_disease_effect = { DISEASE = pneumonic } #Removes the trait, sends event "health.2202" to those who care
						remove_disease_treatment_effect = yes
					}
					great_pox = {
						recover_from_disease_effect = { DISEASE = great_pox } #Removes the trait, sends event "health.2202" to those who care & sexual partners
						remove_disease_treatment_effect = yes
					}
					early_great_pox = {
						remove_trait = early_great_pox
					}
					lovers_pox ={
						remove_trait = lovers_pox
					}
					leper ={
						remove_trait = leper
					}
					gout_ridden = {
						recover_from_disease_effect = { DISEASE = gout_ridden } #Removes the trait, sends event "health.2202" to those who care
						remove_disease_treatment_effect = yes
					}
					consumption = {
						recover_from_disease_effect = { DISEASE = consumption } #Removes the trait, sends event "health.2202" to those who care
						remove_disease_treatment_effect = yes
					}
					cancer = {
						recover_from_disease_effect = { DISEASE = cancer } #Removes the trait, sends event "health.2202" to those who care
						remove_disease_treatment_effect = yes
					}
					typhus = {
						recover_from_disease_effect = { DISEASE = typhus } #Removes the trait, sends event "health.2202" to those who care
						remove_disease_treatment_effect = yes
					}
					bubonic_plague = {
						recover_from_disease_effect = { DISEASE = bubonic_plague } #Removes the trait, sends event "health.2202" to those who care & liege/host/imprisoner, adds immunity flag
						remove_disease_treatment_effect = yes
					}
					smallpox = {
						recover_from_disease_effect = { DISEASE = smallpox } #Removes the trait, sends event "health.2202" to those who care & liege/host/imprisoner, adds immunity flag
						remove_disease_treatment_effect = yes
					}
					measles = {
						recover_from_disease_effect = { DISEASE = measles } #Removes the trait, sends event "health.2202" to those who care & liege/host/imprisoner, adds immunity flag
						remove_disease_treatment_effect = yes
					}
					dysentery = {
						recover_from_disease_effect = { DISEASE = dysentery } #Removes the trait, sends event "health.2202" to those who care & liege/host/imprisoner, adds immunity flag
						remove_disease_treatment_effect = yes
					}
					ergotism = {
						recover_from_disease_effect = { DISEASE = ergotism } #Removes the trait, sends event "health.2202" to those who care & liege/host/imprisoner, adds immunity flag
						remove_disease_treatment_effect = yes
					}
				}
			}
		}
	}
	scope:recipient = {				
		if = {
			limit = {
				NOT = { scope:actor = scope:recipient }
			}
			add_opinion = {
				modifier = grateful_opinion
				target = scope:actor
				opinion = 70
			}
		}
	}		
}