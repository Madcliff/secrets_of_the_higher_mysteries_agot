zz_valyria_magic_blood_magic_07_story = { #Used for the Scholarship progress event

	on_setup = {
        story_owner = {
            var:caster = {
			    save_scope_as = secondary_recipient
		    }
		    remove_variable = caster
		}
        
        set_variable = {
			name = mystery_potency
			value = zz_valyria_magic_blood_magic_07_mysteries_of_enchanted_blood_value
		}
		set_variable = {
			name = mystery_duration
			value = zz_valyria_magic_blood_magic_07_mysteries_of_enchanted_blood_value
		}
		set_variable = {
			name = mystery_caster
			value = scope:secondary_recipient
		}
        
	}

	on_end = {
		story_owner = {
		}
	}

	on_owner_death = {
		end_story = yes
	}

	effect_group = {
		days = 365
        triggered_effect = {
            trigger = {
		        scope:story.var:mystery_duration > 0
            }
            effect = {
                change_variable = {
                    name = mystery_duration
                    subtract = 1
                }
                story_owner = {
                    random_list = {
                        20 = {
                            send_interface_toast = {
								type = send_interface_message_as_feed_spell_buff_proc
                                title = zz_blood_magic_enchanted_blood_random
                                left_icon = THIS
                                add_diplomacy_skill = 1
                            }
                        }
                        20 = {
                            send_interface_toast = {
								type = send_interface_message_as_feed_spell_buff_proc
                                title = zz_blood_magic_enchanted_blood_random
                                left_icon = THIS
                                add_martial_skill = 1
                            }
                        }
                        20 = {
                            send_interface_toast = {
								type = send_interface_message_as_feed_spell_buff_proc
                                title = zz_blood_magic_enchanted_blood_random
                                left_icon = THIS
                                add_intrigue_skill = 1
                            }
                        }
                        20 = {
                            send_interface_toast = {
								type = send_interface_message_as_feed_spell_buff_proc
                                title = zz_blood_magic_enchanted_blood_random
                                left_icon = THIS
                                add_stewardship_skill = 1
                            }
                        }
                        20 = {
                            send_interface_toast = {
								type = send_interface_message_as_feed_spell_buff_proc
                                title = zz_blood_magic_enchanted_blood_random
                                left_icon = THIS
                                add_learning_skill = 1
                            }
                        }
                        20 = {
                            send_interface_toast = {
								type = send_interface_message_as_feed_spell_buff_proc
                                title = zz_blood_magic_enchanted_blood_random
                                left_icon = THIS
                                add_prowess_skill = 1
                            }
                        }
                    }
                }
            }
        }
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration < 1
            }
            effect = {
                scope:story = {
                    end_story = yes
                }
                
            }
        }
	}
}

zz_valyria_magic_blood_magic_09_story = { #Used for the Scholarship progress event

	on_setup = {
        story_owner = {
            var:caster = {
			    save_scope_as = secondary_recipient
		    }
		    remove_variable = caster
		}
        set_variable = {
			name = mystery_potency
			value = zz_valyria_magic_blood_magic_09_mysteries_of_draconic_enhancement_value
		}
		set_variable = {
			name = mystery_duration
			value = zz_valyria_magic_blood_magic_09_mysteries_of_draconic_duration_value
		}
	}

	on_end = {
		story_owner = {
		}
	}

	on_owner_death = {
		end_story = yes
	}

	effect_group = {
		days = 365
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration > 0
            }
            effect = {
                change_variable = {
                    name = mystery_duration
                    subtract = 1
                }
                story_owner = {
                    THIS = { 
                        save_scope_as = dragon
                    }
                    send_interface_toast = {
						type = send_interface_message_as_feed_spell_buff_proc
                        title = zz_blood_magic_draconic_enchantment
						desc = zz_blood_magic_draconic_enchantment.desc
                        left_icon = THIS
                        add_prowess_skill = scope:story.var:mystery_potency 
                        change_dragon_size = {
							VALUE = scope:story.var:mystery_potency 							
						}

                        add_prowess_skill = 2
						change_dragon_size = {
							VALUE = 2							
						}
                        
                    }
                    var:current_rider ?= { 
                        save_scope_as = rider 
                    }
                    scope:rider ?= {
                        send_interface_toast = {
							type = send_interface_message_as_feed_spell_buff_proc
                            title = zz_blood_magic_draconic_enchantment
							desc = zz_blood_magic_draconic_enchantment.desc
                            left_icon = scope:rider
                            right_icon = story_owner
                        }
                    }
                }
            }
        }
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration < 1
            }
            effect = {
                end_story = yes
            }
        }

	}
}

zz_valyria_magic_blood_magic_24_story = { #Used for the Scholarship progress event

	on_setup = {
        story_owner = {
            var:caster = {
			    save_scope_as = secondary_recipient
		    }
		    remove_variable = caster
		}
        set_variable = {
			name = mystery_potency
			value = zz_valyria_magic_blood_magic_24_mysteries_of_enchanted_blood_learning_value
		}
		set_variable = {
			name = mystery_duration
			value = zz_valyria_magic_blood_magic_24_mysteries_of_enchanted_blood_learning_value
		}
	}

	on_end = {
		story_owner = {
		}
	}

	on_owner_death = {
		end_story = yes
	}

	effect_group = {
		days = 365
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration > 0
            }
            effect = {
                change_variable = {
                    name = mystery_duration
                    subtract = 1
                }
                story_owner = {
                    send_interface_toast = {
						type = send_interface_message_as_feed_spell_buff_proc
                        title = zz_blood_magic_enchanted_blood_learning
                        left_icon = THIS
                        add_learning_skill = 1
                    }
                }
            }
        }
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration < 1
            }
            effect = {
                end_story = yes
            }
        }

	}
}

zz_valyria_magic_blood_magic_25_story = { #Used for the Diplo progress event

	on_setup = {
        story_owner = {
            var:caster = {
			    save_scope_as = secondary_recipient
		    }
		    remove_variable = caster
		}
        set_variable = {
			name = mystery_potency
			value = zz_valyria_magic_blood_magic_25_mysteries_of_enchanted_blood_diplomacy_value
		}
		set_variable = {
			name = mystery_duration
			value = zz_valyria_magic_blood_magic_25_mysteries_of_enchanted_blood_diplomacy_value
		}
	}

	on_end = {
		story_owner = {
		}
	}

	on_owner_death = {
		end_story = yes
	}

	effect_group = {
		days = 365
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration > 0
            }
            effect = {
                change_variable = {
                    name = mystery_duration
                    subtract = 1
                }
                story_owner = {
                    send_interface_toast = {
						type = send_interface_message_as_feed_spell_buff_proc
                        title = zz_blood_magic_enchanted_blood_diploamcy
                        left_icon = THIS
                        add_diplomacy_skill = 1
                    }
                }
            }
        }
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration < 1
            }
            effect = {
                end_story = yes
            }
        }

	}
}

zz_valyria_magic_blood_magic_26_story = { #Used for the Scholarship progress event

	on_setup = {
        story_owner = {
            var:caster = {
			    save_scope_as = secondary_recipient
		    }
		    remove_variable = caster
		}
        set_variable = {
			name = mystery_potency
			value = zz_valyria_magic_blood_magic_26_mysteries_of_enchanted_blood_stewardship_value
		}
		set_variable = {
			name = mystery_duration
			value = zz_valyria_magic_blood_magic_26_mysteries_of_enchanted_blood_stewardship_value
		}
	}

	on_end = {
		story_owner = {
		}
	}

	on_owner_death = {
		end_story = yes
	}

	effect_group = {
		days = 365
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration > 0
            }
            effect = {
                change_variable = {
                    name = mystery_duration
                    subtract = 1
                }
                story_owner = {
                    send_interface_toast = {
						type = send_interface_message_as_feed_spell_buff_proc
                        title = zz_blood_magic_enchanted_blood_stewardship
                        left_icon = THIS
                        add_stewardship_skill = 1
                    }
                }
            }
        }
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration < 1
            }
            effect = {
                end_story = yes
            }
        }

	}
}

zz_valyria_magic_blood_magic_27_story = { #Used for the Scholarship progress event

	on_setup = {
        story_owner = {
            var:caster = {
			    save_scope_as = secondary_recipient
		    }
		    remove_variable = caster
		}
        set_variable = {
			name = mystery_potency
			value = zz_valyria_magic_blood_magic_27_mysteries_of_enchanted_blood_intrigue_value
		}
		set_variable = {
			name = mystery_duration
			value = zz_valyria_magic_blood_magic_27_mysteries_of_enchanted_blood_intrigue_value
		}
	}

	on_end = {
		story_owner = {
		}
	}

	on_owner_death = {
		end_story = yes
	}

	effect_group = {
		days = 365
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration > 0
            }
            effect = {
                change_variable = {
                    name = mystery_duration
                    subtract = 1
                }
                story_owner = {
                    send_interface_toast = {
						type = send_interface_message_as_feed_spell_buff_proc
                        title = zz_blood_magic_enchanted_blood_intrigue
                        left_icon = THIS
                        add_intrigue_skill = 1
                    }
                }
            }
        }
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration < 1
            }
            effect = {
                end_story = yes
            }
        }

	}
}
zz_valyria_magic_blood_magic_28_story = { #Used for the Scholarship progress event

	on_setup = {
        story_owner = {
            var:caster = {
			    save_scope_as = secondary_recipient
		    }
		    remove_variable = caster
		}
        set_variable = {
			name = mystery_potency
			value = zz_valyria_magic_blood_magic_28_mysteries_of_enchanted_blood_martial_value
		}
		set_variable = {
			name = mystery_duration
			value = zz_valyria_magic_blood_magic_28_mysteries_of_enchanted_blood_martial_value
		}
		set_variable = {
			name = mystery_caster
			value = scope:secondary_recipient
		}
	}

	on_end = {
		story_owner = {
		}
	}

	on_owner_death = {
		end_story = yes
	}

	effect_group = {
		days = 365
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration > 0
            }
            effect = {
                change_variable = {
                    name = mystery_duration
                    subtract = 1
                }
                story_owner = {
                    send_interface_toast = {
						type = send_interface_message_as_feed_spell_buff_proc
                        title = zz_blood_magic_enchanted_blood_martial
                        left_icon = THIS
                        add_martial_skill = 1
                    }
                }
            }
        }
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration < 1
            }
            effect = {
                end_story = yes
            }
        }

	}
}
zz_valyria_magic_blood_magic_29_story = { #Used for the Scholarship progress event

	on_setup = {
        story_owner = {
            var:caster = {
			    save_scope_as = secondary_recipient
		    }
		    remove_variable = caster
		}
        set_variable = {
			name = mystery_potency
			value = zz_valyria_magic_blood_magic_29_mysteries_of_enchanted_blood_prowess_value
		}
		set_variable = {
			name = mystery_duration
			value = zz_valyria_magic_blood_magic_29_mysteries_of_enchanted_blood_prowess_value
		}
		set_variable = {
			name = mystery_caster
			value = scope:secondary_recipient
		}
	}

	on_end = {
		story_owner = {
		}
	}

	on_owner_death = {
		end_story = yes
	}

	effect_group = {
		days = 365
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration > 0
            }
            effect = {
                change_variable = {
                    name = mystery_duration
                    subtract = 1
                }
                story_owner = {
                    send_interface_toast = {
						type = send_interface_message_as_feed_spell_buff_proc
                        title = zz_blood_magic_enchanted_blood_prowesss
                        left_icon = THIS
                        add_prowess_skill = 1
                    }
                }
            }
        }
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration < 1
            }
            effect = {
                end_story = yes
            }
        }

	}
}

zz_valyria_magic_dream_magic_04_story = { #Used for the Scholarship progress event

	on_setup = {
        story_owner = {
            var:caster = {
			    save_scope_as = secondary_recipient
		    }
		    remove_variable = caster
		}
        
        set_variable = {
			name = mystery_potency
			value = zz_valyria_magic_dream_magic_04_mysteries_of_secrets_value
		}
		set_variable = {
			name = mystery_duration
			value = zz_valyria_magic_dream_magic_04_mysteries_of_secrets_value
		}
		set_variable = {
			name = mystery_caster
			value = scope:secondary_recipient
		}
        
	}

	on_end = {
		story_owner = {
		}
	}

	on_owner_death = {
		end_story = yes
	}

	effect_group = {
		months = 1
        triggered_effect = {
            trigger = {
		        scope:story.var:mystery_duration > 0
            }
            effect = {
                change_variable = {
                    name = mystery_duration
                    subtract = 1
                }
                story_owner = {
					save_scope_as = dreamer
					zz_dragon_dreams = yes
					if = {
						limit = {
							zz_magic_any_targeting_scheme = yes 
						}
						random_targeting_scheme = {
							limit = {
								zz_random_targeting_scheme = yes
							}
							if = {
								limit = { exists = this	}
								save_scope_as = dreaming_magic_secret_target
							}
						}
					}
					else_if = {
						limit = {
							any_spouse = {
								zz_magic_any_targeting_scheme = yes 
							}
						}
						random_spouse = {
							limit = {
								zz_magic_any_targeting_scheme = yes 
							}
							random_targeting_scheme = {
								limit = {
									zz_random_targeting_scheme = yes
								}
								if = {
									limit = { exists = this	}
									save_scope_as = dreaming_magic_secret_target
								}
							}
						}
					}
					else_if = {
						limit = {
							any_close_family_member = {
								zz_magic_any_targeting_scheme = yes 
							}
						}
						random_close_family_member = {
							limit = {
								zz_magic_any_targeting_scheme = yes 
							}
							random_targeting_scheme = {
								limit = {
									zz_random_targeting_scheme = yes
								}
								if = {
									limit = { exists = this	}
									save_scope_as = dreaming_magic_secret_target
								}
							}
						}
					}
					else = {
						random_neighboring_and_across_water_realm_same_rank_owner ={
							limit = {	
								zz_magic_any_targeting_scheme = yes 
							}
							add_to_list = scrying_targets
						}
						random_neighboring_and_across_water_realm_same_rank_owner ={
							limit = {	
								zz_magic_any_targeting_scheme = yes 
							}
							add_to_list = scrying_targets
						}
						random_neighboring_and_across_water_top_liege_realm_owner ={
							limit = {	
								zz_magic_any_targeting_scheme = yes 
							}
							add_to_list = scrying_targets
						}
						random_councillor = {
							limit = {	
								zz_magic_any_targeting_scheme = yes 
							}
							if = {
								limit = {
									exists = scope:dreamer.primary_spouse
									scope:dreamer.primary_spouse = {
										zz_magic_any_targeting_scheme = yes 
									}
								}
								scope:dreamer.primary_spouse = {
									add_to_list = scrying_targets
								}
							}
							if = {
								limit = {
									exists = scope:dreamer.liege
									scope:dreamer.liege = {
										zz_magic_any_targeting_scheme = yes 
									}
								}
								scope:dreamer.liege = {
									add_to_list = scrying_targets
								}
							}			
						}
						random_in_list = {
							list = scrying_targets
							save_scope_as = scrying_target
						}
						if = {
							limit = {
								NOT = {	exists = scope:scrying_target	}
							}
							random_living_character = {
								limit = {
									zz_magic_any_targeting_scheme = yes 
								}
								save_scope_as = scrying_target
							}
							scope:scrying_target = {
								random_targeting_scheme = {
									limit = {
										zz_random_targeting_scheme = yes
									}
									save_scope_as = dreaming_magic_secret_target
								}
							}
						}
						else = {
							scope:scrying_target = {
								random_targeting_scheme = {
									limit = {
										zz_random_targeting_scheme = yes
									}
									if = {
										limit = { exists = this	}
										save_scope_as = dreaming_magic_secret_target
									}
								}
							}
						}
					}

                    send_interface_toast = {
						type = send_interface_message_as_feed_spell_buff_proc
                        title = zz_valyria_magic_dream_magic_04_story.t
						desc = zz_valyria_magic_dream_magic_04_story.desc
                        left_icon = THIS
						right_icon = scope:dreaming_magic_secret_target
                        scope:dreaming_magic_secret_target = {
							expose_scheme = yes
						}
                    }
					if = {
						limit = {
							any_targeting_secret = {
								exists = this
								NOT = {	is_known_by = scope:dreamer	}
							}
						}
						random_targeting_secret = {
							limit = {
								NOT = {	is_known_by = scope:dreamer	}
							}
							if = {
								limit = { exists = this	}
								save_scope_as = dreaming_magic_secret_target
							}
						}
					}
					else_if = {
						limit = {
							any_spouse = {
								any_targeting_secret = {
									exists = this 
									NOT = {	is_known_by = scope:dreamer	}
								}
							}
						}
						random_spouse = {
							limit = {
								any_targeting_secret = {
									exists = this 
									NOT = {	is_known_by = scope:dreamer	}
								}
							}
							random_targeting_secret = {
								limit = {
									NOT = {	is_known_by = scope:dreamer	}
								}
								if = {
									limit = { exists = this	}
									save_scope_as = dreaming_magic_secret_target
								}
							}
						}
					}
					else_if = {
						limit = {
							any_close_family_member = {
								any_targeting_secret = {
									exists = this 
									NOT = {	is_known_by = scope:dreamer	}
								}
							}
						}
						random_close_family_member = {
							limit = {
								any_targeting_secret = {
									exists = this 
									NOT = {	is_known_by = scope:dreamer	}
								}
							}
							random_targeting_secret = {
								limit = {
									NOT = {	is_known_by = scope:dreamer	}
								}
								if = {
									limit = { exists = this	}
									save_scope_as = dreaming_magic_secret_target
								}
							}
						}
					}
					else = {
						random_neighboring_and_across_water_realm_same_rank_owner ={
							limit = {	
								has_any_secrets = yes
								any_secret = {
									NOT = {	is_known_by = scope:dreamer	}
								}
							}
							add_to_list = scrying_targets
						}
						random_neighboring_and_across_water_realm_same_rank_owner ={
							limit = {	
								has_any_secrets = yes
								any_secret = {
									NOT = {	is_known_by = scope:dreamer	}
								}
							}
							add_to_list = scrying_targets
						}
						random_neighboring_and_across_water_top_liege_realm_owner ={
							limit = {	
								has_any_secrets = yes
								any_secret = {
									NOT = {	is_known_by = scope:dreamer	}
								}
							}
							add_to_list = scrying_targets
						}
						random_councillor = {
							limit = {	
								has_any_secrets = yes
								any_secret = {
									NOT = {	is_known_by = scope:dreamer	}
								}
							}
							if = {
								limit = {
									exists = scope:dreamer.primary_spouse
									scope:dreamer.primary_spouse = {
										has_any_secrets = yes
										any_secret = {
											NOT = {	is_known_by = scope:dreamer	}
										}
									}
								}
								scope:dreamer.primary_spouse = {
									add_to_list = scrying_targets
								}
							}
							if = {
								limit = {
									exists = scope:dreamer.liege
									scope:dreamer.liege = {
										has_any_secrets = yes
										any_secret = {
											NOT = {	is_known_by = scope:dreamer	}
										}
									}
								}
								scope:dreamer.liege = {
									add_to_list = scrying_targets
								}
							}			
						}
						random_in_list = {
							list = scrying_targets
							save_scope_as = scrying_target
						}
						if = {
							limit = {
								NOT = {	exists = scope:scrying_target	}
							}
							random_living_character = {
								limit = {
									has_any_secrets = yes
									any_secret = {
										NOT = {	is_known_by = scope:dreamer	}
									}
								}
								save_scope_as = scrying_target
							}
							scope:scrying_target = {
								random_secret = {
									limit = {
										NOT = {	is_known_by = scope:dreamer	}
									}
									save_scope_as = dreaming_magic_secret_target
								}
							}
						}
						else = {
							scope:scrying_target = {
								random_secret = {
									limit = {
										NOT = {	is_known_by = scope:dreamer	}
									}
									if = {
										limit = { exists = this	}
										save_scope_as = dreaming_magic_secret_target
									}
								}
							}
						}
					}

                    send_interface_toast = {
						type = send_interface_message_as_feed_spell_buff_proc
                        title = zz_valyria_magic_dream_magic_04_story.t
						desc = zz_valyria_magic_dream_magic_04_story.desc
                        left_icon = THIS
						right_icon = scope:dreaming_magic_secret_target
                        scope:dreaming_magic_secret_target = {
							reveal_to = scope:dreamer
						}
                    }
                }
            }
        }
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration < 1
            }
            effect = {
                scope:story = {
                    end_story = yes
                }
                
            }
        }
	}
}

zz_valyria_magic_dream_magic_10_story = { #Used for the Scholarship progress event

	on_setup = {
        story_owner = {
            var:caster = {
			    save_scope_as = secondary_recipient
		    }
		    remove_variable = caster
		}
        set_variable = {
			name = mystery_potency
			value = zz_valyria_magic_dream_magic_10_mysteries_dreams_of_mystic_power_value
		}
		set_variable = {
			name = mystery_duration
			value = zz_valyria_magic_dream_magic_10_mysteries_dreams_of_mystic_power_duration
		}
		set_variable = {
			name = mystery_caster
			value = scope:secondary_recipient
		}
	}

	on_end = {
		story_owner = {
		}
	}

	on_owner_death = {
		end_story = yes
	}

	effect_group = {
		days = 365
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration > 0
            }
            effect = {
                change_variable = {
                    name = mystery_duration
                    subtract = 1
                }
            }
        }
        triggered_effect = {
            trigger = {
                scope:story.var:mystery_duration < 1
            }
            effect = {
                end_story = yes
            }
        }

	}
}